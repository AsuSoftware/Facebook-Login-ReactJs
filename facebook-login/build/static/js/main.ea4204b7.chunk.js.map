{"version":3,"sources":["components/Home/Home.js","components/LoginFacebook/LoginFacebook.js","App.js","serviceWorker.js","index.js"],"names":["Home","dataCookie","Cookies","get","userData","undefined","name","lastName","email","picture","className","src","alt","onClick","window","FB","getLoginStatus","response","status","logout","document","cookie","location","reload","LoginFacebook","state","redirect","facebookLogin","facebookLoginHandler","login","scope","console","log","api","userName","JSON","stringify","split","userDataState","replace","data","url","set","path","setState","this","to","React","Component","App","cookies","isUserLogged","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wVAyDeA,EAhDF,WAEZ,IACMC,GADU,IAAIC,KACOC,IAAI,YAE3BC,EAAW,QAGIC,IAAfJ,IACHG,EAAW,CACVE,KAAML,EAAWK,KACjBC,SAAUN,EAAWM,SACrBC,MAAOP,EAAWO,MAClBC,QAASR,EAAWQ,UAoBtB,OACC,yBAAKC,UAAU,gBACd,yBAAKA,UAAU,OACd,yBAAKC,IAAKP,EAASK,QAASG,IAAKR,EAASE,OAC1C,uCAAaF,EAASE,KAAtB,IAA6BF,EAASG,UACtC,qCAAWH,EAASI,OACpB,uBAAGK,QAtBiB,WAEtBC,OAAOC,GAAGC,gBAAe,SAAAC,GAEpBA,GAAgC,cAApBA,EAASC,QAExBJ,OAAOC,GAAGI,QAAO,SAAUF,GAE1BG,SAASC,OAAS,sDAClBD,SAASE,SAASC,gBAaSb,UAAU,UACrC,6C,eC2BUc,E,4MAnEdC,MAAQ,CACPC,UAAU,G,EAGXC,cAAgB,WACVb,OAAOC,IAIZD,OAAOC,GAAGC,gBAAe,SAAAC,GACA,cAApBA,EAASC,OAGZ,EAAKU,qBAAqBX,GAI1BH,OAAOC,GAAGc,MAAM,EAAKD,qBAAsB,CAAEE,MAAO,8B,EAKvDF,qBAAuB,SAACX,GACvBc,QAAQC,IAAIf,GACY,cAApBA,EAASC,QAEZJ,OAAOC,GAAGkB,IAAI,iCAAiC,SAAA7B,GAC9C2B,QAAQC,IAAI5B,GAEZ,IAAM8B,EAAWC,KAAKC,UAAUhC,EAASE,MAAM+B,MAAM,KAK/CC,EAAgB,CACrBhC,KAJiB4B,EAAS,GAAGK,QAAQ,IAAK,IAK1ChC,SAJiB2B,EAAS,GAAGK,QAAQ,IAAK,IAK1C/B,MAAOJ,EAASI,MAChBC,QAASL,EAASK,QAAQ+B,KAAKC,KAEhCV,QAAQC,IAAIM,IACI,IAAIpC,KAEZwC,IAAI,WAAYJ,EAAe,CAAEK,KAAM,MAC/C,EAAKC,SAAS,CACblB,UAAU,Q,uDAOb,OAA4B,IAAxBmB,KAAKpB,MAAMC,SACP,kBAAC,IAAD,CAAUoB,GAAG,UAGnB,yBAAKpC,UAAU,iBACd,8CACA,uBAAGG,QAASgC,KAAKlB,cAAejB,UAAU,SACzC,2D,GA7DsBqC,IAAMC,W,QC+BnBC,E,uKAhBX,OACE,kBAAC,IAAD,KAZe,WACnB,IAAMC,EAAU,IAAIhD,IACdE,EAAW+B,KAAKC,UAAUc,EAAQ/C,IAAI,aAG5C,YADaE,IAAbD,EAAiC,kBAAC,IAAD,CAAU0C,GAAG,WAAsB,kBAAC,IAAD,CAAUA,GAAG,UAS1EK,GACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOR,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,a,GAXMI,IAAMC,WCPJI,QACW,cAA7BtC,OAAOQ,SAAS+B,UAEe,UAA7BvC,OAAOQ,SAAS+B,UAEhBvC,OAAOQ,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.ea4204b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Home.scss';\nimport Cookies from 'universal-cookie';\n\n\n/*\n * Questa classe si occupa di mostrare i dati all'utente che si e loggato \n*/\nconst Home = () => {\n\n\tconst cookies = new Cookies();\n\tconst dataCookie = cookies.get('userData');\n\n\tlet userData = {}; // dichiaro una variabile per mettere i nostri dati se ci sono\n\n\t// se i dati sono presenti nel cookie\n\tif (dataCookie !== undefined) {\n\t\tuserData = {\n\t\t\tname: dataCookie.name,\n\t\t\tlastName: dataCookie.lastName,\n\t\t\temail: dataCookie.email,\n\t\t\tpicture: dataCookie.picture,\n\t\t}\n\t}\n\n\tconst facebookLogout = () => {\n\t\t// vedo lo status del login\n\t\twindow.FB.getLoginStatus(response => {\n\t\t\t// se il profilo e connesso\n\t\t\tif (response && response.status === 'connected') {\n\t\t\t\t// esegui il logout dalla app\n\t\t\t\twindow.FB.logout(function (response) {\n\t\t\t\t\t// remove cookie\n\t\t\t\t\tdocument.cookie = \"userData= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n\t\t\t\t\tdocument.location.reload();\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\n\treturn (\n\t\t<div className=\"home-section\">\n\t\t\t<div className=\"box\">\n\t\t\t\t<img src={userData.picture} alt={userData.name} />\n\t\t\t\t<h2>Welcome {userData.name} {userData.lastName}</h2>\n\t\t\t\t<p>Email: {userData.email}</p>\n\t\t\t\t<a onClick={facebookLogout} className=\"logout\">\n\t\t\t\t\t<span>Log Out</span>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './LoginFacebook.scss';\nimport Cookies from 'universal-cookie';\nimport { Redirect } from \"react-router-dom\";\n\n\nclass LoginFacebook extends React.Component {\n\n\tstate = {\n\t\tredirect: false,\n\t}\n\n\tfacebookLogin = () => {\n\t\tif (!window.FB) return;\n\n\t\t// Facciamo il login\n\t\t// vediamo se esiste uno status attivo\n\t\twindow.FB.getLoginStatus(response => {\n\t\t\tif (response.status === 'connected') {\n\t\t\t\t// Logged into your webpage and Facebook.\n\t\t\t\t// leggiamo i dati\n\t\t\t\tthis.facebookLoginHandler(response);\n\t\t\t} else { // la persona non e loggata nel sito\n\t\t\t\t// aviamo la finestra per accedere al facebook dell'utente\n\t\t\t\t// lo scope sono le autorizazioni che richiediamo all'utente nel momento del log in\n\t\t\t\twindow.FB.login(this.facebookLoginHandler, { scope: 'public_profile, email' });\n\t\t\t}\n\t\t});\n\t}\n\n\tfacebookLoginHandler = (response) => {\n\t\tconsole.log(response);\n\t\tif (response.status === 'connected') {\n\t\t\t// leggiamo i dati dell'utente rispettivo\n\t\t\twindow.FB.api('/me?fields=name,email,picture', userData => {\n\t\t\t\tconsole.log(userData);\n\t\t\t\t// deposito la sessione dell' utente nella nostra applicazione\n\t\t\t\tconst userName = JSON.stringify(userData.name).split(\" \");\n\t\t\t\t// suddivido il nome intero che facebook mi da, in modo da poter avere separati il nome e cognome\n\t\t\t\tconst name_user = userName[0].replace('\"', '');\n\t\t\t\tconst last_name = userName[1].replace('\"', '');\n\n\t\t\t\tconst userDataState = {\n\t\t\t\t\tname: name_user,\n\t\t\t\t\tlastName: last_name,\n\t\t\t\t\temail: userData.email,\n\t\t\t\t\tpicture: userData.picture.data.url\n\t\t\t\t}\n\t\t\t\tconsole.log(userDataState);\n\t\t\t\tconst cookies = new Cookies();\n\t\t\t\t// salviamo i dati nel cookie\n\t\t\t\tcookies.set(\"userData\", userDataState, { path: '/' });\n\t\t\t\tthis.setState({\n\t\t\t\t\tredirect: true // lo rendiamo a true in modo da cambiare rotta ed andare nel home component\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.redirect === true) {\n\t\t\treturn <Redirect to='/home' />\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"login-section\">\n\t\t\t\t\t<h2>Facebook Login</h2>\n\t\t\t\t\t<a onClick={this.facebookLogin} className=\"login\">\n\t\t\t\t\t\t<span>Connect to facebook</span>\n\t\t\t\t\t</a>\n\t\t\t\t</div>);\n\t\t}\n\t}\n};\n\n\nexport default LoginFacebook;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport LoginFacebook from './components/LoginFacebook/LoginFacebook';\nimport Cookies from 'universal-cookie';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\n\n\n\n// funzione il cui scopo e vedere se nel cookie ci sono informazioni dell'utente oppure no\nconst isUserLogged = () => {\n  const cookies = new Cookies();\n  const userData = JSON.stringify(cookies.get('userData'));\n  let route = <LoginFacebook />;\n  userData === undefined ? route = <Redirect to='/login' /> : route = <Redirect to='/home' />;\n  return route;\n}\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        {isUserLogged()}\n        <Switch>\n          <Route path=\"/login\">\n            <LoginFacebook />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}